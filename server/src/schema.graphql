type Query {
  info: String!
  feed(
    filter: String
    skip: Int
    take: Int
    orderBy: LinkOrderByInput
  ): Feed!
}

type Feed {
  id: ID!
  links: [Link!]!
  count: Int!
}

type Mutation {
  post(url: String!, description: String!): Link!
  signup(
    email: String!
    password: String!
    name: String!
  ): AuthPayload
  login(email: String!, password: String!): AuthPayload
  vote(linkId: ID!): Vote
  deleteLink(id: ID!): DeleteLinkResponse
}

type Subscription {
  newLink: Link
  newVote: Vote
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
  links: [Link!]!
}

type Link {
  id: ID!
  description: String!
  url: String!
  postedBy: User
  votes: [Vote!]!
  createdAt: DateTime!
}
type DeleteLinkResponse {
  message: String!
  error: String
}

type Vote {
  id: ID!
  user: User!
  link: Link! 
  message: String!
}

input LinkOrderByInput {
  description: Sort
  url: Sort
  createdAt: Sort
}

enum Sort {
  asc
  desc
}

scalar DateTime
